name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

jobs:
  basic_checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm ci

      - name: Audit packages
        run: npm audit --json > npm_audit.json

      - name: ESLint
        run: npm run lint

      - name: Verify audit results on pull requests
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const auditResults = JSON.parse(fs.readFileSync('npm_audit.json', 'utf8'));

            const vulnerabilities = auditResults.metadata.vulnerabilities.total;
            if (vulnerabilities === 0) {
              console.log('No vulnerabilities found.');
            } else {
              console.error(`Vulnerabilities found: ${vulnerabilities}`);
              if (context.payload.pull_request) {
                const pullRequestNumber = context.payload.pull_request.number;
                const pullRequestURL = context.payload.pull_request.html_url;
                const commentBody = `Found ${vulnerabilities} vulnerabilities in this pull request. Please address them.`;
                github.issues.createComment({
                  issue_number: pullRequestNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              }
              process.exit(1);
            }

      - name: Components testing
        run: npm run test:components

      - name: Server unit testing
        run: npm run test:unit:server

  integration_test:
    runs-on: ubuntu-latest
    needs: basic_checks

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_database
        ports:
          - 8888:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:8888/test_database?schema=public" >> .env
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env
          echo "NEXT_URL=http://localhost:3000" >> .env

      - name: Run database migrations
        run: npm run migrate:up

      - name: Generate prisma client
        run: npm run generate:prisma

      - name: Run server tests
        run: npm run test:integration
